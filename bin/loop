#!/usr/bin/env node

const copyFile = require('../lib/copyFile');
const debug = require('debug')('loop');
const fs = require('fs');
const loop = require('../lib/loop');
const path = require('path');
const util = require('util');

const LOOPRC = '.looprc';

var argv = require('yargs').default('cwd', process.cwd()).argv;

if (argv.help || (!argv.init && !argv._.length)) {
  const usage = `

    loop executes a command against child directories within its current working directory

    usage:

      loop [command]                                      - execute a command against all child dirs
      loop ["command with multiple words in quotes"]      - execute a multi-word command against all child dirs
      loop --cwd ../other/working/directory               - execute a command against all child dirs, setting the working directory to another directory
      loop --include comma,delimited,list,of,dirs         - execute a command against all child dirs including a number of directories which might otherwise be ignored, for instance, in .looprc
      loop --include-only comma,delimited,list,of,dirs    - execute a command against all child dirs, ignoring .looprc, and only including the specified directories
      loop --exclude comma,delimited,list,of,dirs         - execute a command against all child dirs, excluding the specified directories
      loop --exclude-only comma,delimited,list,of,dirs    - execute a command against all child dirs, excluding only the specified directories
      loop --init                                         - create a .looprc file in the current working directory

    examples: 

      loop pwd
      loop "git status"
      loop "git checkout -b feature/new-feature"
      loop "git push origin feature/new-feature"

    .looprc: 

      directories containing a .looprc json file may have extra behavior, determined by properties within the file:

        ignore (type Array) any child directory names listed in ignore will be ignored and skipped from execution

    example .looprc:

    {
      "ignore": [ ".git", ".vagrant", ".vscode", "ansible", "node_modules", "scripts" ]
    }

      `;
  return console.log(usage);
}

var cwd = argv.cwd;

if (cwd[0] !== '/') {
  cwd = path.resolve(cwd);
}

debug(`running loop ${argv._} in cwd ${cwd}`);

const command = process.argv[2];
const exitOnError = process.argv.indexOf('--exit-on-error') >= 0;
const exitOnAggregateError = process.argv.indexOf('--exit-on-aggregated-error') >= 0;

if (argv.init) {
  copyFile(path.resolve(__dirname, '..', 'support', LOOPRC), path.resolve(cwd, LOOPRC));
  console.log(`created ${LOOPRC} at ${cwd}`);
  return;
}

var looprc = null;
var buffer = null;

const looprcLocation = path.join(cwd, '.looprc');

try {
  buffer = fs.readFileSync(looprcLocation);
  debug(`.looprc file found at ${looprcLocation}`);
} catch (e) {
  debug(`no .looprc file found at ${looprcLocation}`);
}

if (buffer) {
  try {
    looprc = JSON.parse(buffer.toString());
    debug(`.looprc file contents parsed: ${util.inspect(looprc, null, Infinity)}`);
  } catch (e) {
    debug(`error parsing .looprc JSON: ${e}`);
  }
}

loop(
  {
    dir: cwd,
    command,
    exitOnError,
    exitOnAggregateError,
    looprc,
  },
  (errorOccured) => {
    if (exitOnAggregateError && errorOccured) {
      console.log('an error occured during loop execution - exiting process');
      process.exit(1);
    }
  }
);
